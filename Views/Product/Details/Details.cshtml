@using DomainCompany.Entities
@using DomainProduct.Entities
@using LojaCorp.Models
@using Newtonsoft.Json.Linq
@model DomainProduct.Entities.ProductDetail
@{
    /**/

    DomainProduct.Entities.Sku SKUPadrao = new DomainProduct.Entities.Sku();
    if (TempData["SKUPadrao"] != null)
    {
        SKUPadrao = (DomainProduct.Entities.Sku)TempData["SKUPadrao"];
    }
    string ListaImagens = string.Empty;
    string ListaSKU = string.Empty;
    string AvailableReferences = string.Empty;
    string JsonDetail = string.Empty;
    string variacaoSelecionada = string.Empty;
    string skuSelecionado = string.Empty;
    var breadcrumb = new List<LojaCorp.Control.BreadcrumbList>();

    Uri Url = System.Web.HttpContext.Current.Request.Url;

    string PathLogo = "/assets/image/logo/logo.png";

    string UrlLogo = Url.Scheme + "://" + Url.Host + PathLogo;

    ViewModels.ViewModelStore.Produto.TreeReference treeReference = (ViewModels.ViewModelStore.Produto.TreeReference)TempData["TreeReference"];

    if (Model.Categories != null)
    {
        breadcrumb = LojaCorp.Control.BreadcrumbProduct.GetBreadcrumCategories(Model.Categories);
    }

    if (treeReference != null)
    {
        JsonDetail = Newtonsoft.Json.JsonConvert.SerializeObject(treeReference);
    }

    if (Model.ProductImages != null)
    {
        ListaImagens = Newtonsoft.Json.JsonConvert.SerializeObject(Model.ProductImages);
    }

    if (Model.SKUs != null)
    {
        ListaSKU = Newtonsoft.Json.JsonConvert.SerializeObject(Model.SKUs);
    }

    if (Model.AvailableReferences != null)
    {
        AvailableReferences = Newtonsoft.Json.JsonConvert.SerializeObject(Model.AvailableReferences);
    }

    if (Model.AvailableReferences != null && Model.AvailableReferences.Count > 0)
    {
        foreach (var referencias in Model.AvailableReferences.OrderBy(o => o.OrdinationOfReferences).ToList())
        {
            foreach (var variacoes in referencias.Variations)
            {
                if (SKUPadrao.Variations.FindAll(r => r.IdVariation == variacoes.IdVariation).Count > 0)
                {
                    var referencia_selecionada = SKUPadrao.Variations.FindAll(r => r.IdVariation == variacoes.IdVariation);
                    variacaoSelecionada += referencias.IdReference.ToString() + '-' + referencia_selecionada.FirstOrDefault().IdVariation.ToString() + ',';
                }
            }
        }

        string character = variacaoSelecionada.Substring(variacaoSelecionada.Length - 1);
        if (character == ",")
        {
            variacaoSelecionada = variacaoSelecionada.Remove(variacaoSelecionada.Length - 1);
        }
    }

    if (SKUPadrao.InstallmentMax == null)
    {
        SKUPadrao.InstallmentMax = new DomainProduct.Entities.InstallmentMax();
        SKUPadrao.InstallmentMax.MaxNumber = 0;
        SKUPadrao.InstallmentMax.Value = 0;
    }

    List<DomainProduct.Entities.ProductRating> lista_avaliacoes_completa = new List<DomainProduct.Entities.ProductRating>();
    if (Model.ProductRatings.Count > 5)
    {
        lista_avaliacoes_completa.AddRange(Model.ProductRatings);
        lista_avaliacoes_completa.RemoveRange(0, 5);
    }

    //GRADE ABERTA B2C
    var hasOpenSku = ViewBag.HasOpenSku != null ? ViewBag.HasOpenSku : false;

    //OneClickMaxiPago
    var useOneClickMaxiPago = ViewBag.UseOneClickMaxiPago != null ? ViewBag.UseOneClickMaxiPago : false;

    List<DomainProduct.Entities.ProductImage> productFirstReferenceImages = new List<DomainProduct.Entities.ProductImage>();
    List<DomainProduct.Entities.ProductImage> productImages = new List<DomainProduct.Entities.ProductImage>();
    var classSkus = "nine";

    if (hasOpenSku)
    {
        classSkus = Model.SKUs != null ? "seven" : "nine";
        productImages = Model.ProductImages;
    }
    else
    {
        if (Model.AvailableReferences != null)
        {
            foreach (var item in Model.ProductImages)
            {
                int flag = 0;
                if (item.Variacao_ids != null)
                {
                    for (int i = 0; i < item.Variacao_ids.Length; i++)
                    {
                        for (int j = 0; j < SKUPadrao.Variations.Count(); j++)
                        {
                            if (item.Variacao_ids[0] == SKUPadrao.Variations[j].IdVariation)
                            {
                                productFirstReferenceImages.Add(item);
                            }
                            if (item.Variacao_ids[i] == SKUPadrao.Variations[j].IdVariation)
                            {
                                flag++;
                            }
                        }
                    }
                }
                if (flag == SKUPadrao.Variations.Count())
                {
                    productImages.Add(item);
                }
            }

            if (productImages.Count == 0)
            {
                productImages = productFirstReferenceImages;
            }
            if (productImages.Count == 0)
            {
                productImages = Model.ProductImages;
            }

            var imageVideo = Model.ProductImages.Where(img => !string.IsNullOrWhiteSpace(img?.Video?.URL)).ToList();
            productImages.AddRange(imageVideo);

            if (productImages.Count == 0)
            {
                Model.ProductImages.RemoveAll(item => item.Variacao_ids == null);
            }
        }
        else
        {
            productImages = Model.ProductImages;
        }
    }

    ViewBag.PurchaseRecurring = "false";

    var firstImageWithVideoNull = productImages.FirstOrDefault(image => image.Video == null);
    string ImagemDefault = firstImageWithVideoNull?.ImageDefault.ToString();


    string ImageOpenGraph = productImages.Count > 0 ? Url.Scheme + ":" + productImages.FirstOrDefault().ImageDefault : UrlLogo;
    
    bool showPriceDiscount = LojaCorp.Control.Company._Company.ShowPriceWithDiscount && LojaCorp.Control.Company._Company.DiscountPaymentMethodList.Any();
    string priceGoogleMerchant = String.Empty;

}

<script>
    var total_avaliacoes_produto = @(Model.ProductRatings != null ? Model.ProductRatings.Count : 0);
    var lista_avaliacao_produto = @(Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(lista_avaliacoes_completa)));
</script>
@{
    ViewBag.Title = string.IsNullOrEmpty(Model.Title) ? Model.Name : Model.Title;
    Layout = "~/Views/Shared/Base/_LayoutBreadCrumb.cshtml";
}
@section remarketing{
    <!-- Google Remarketing -->
    @Html.Action("googleRemarketing", "common", new { origin = ViewContext.RouteData.Values["controller"] })
    <!-- End Google Remarketing -->
}

@section CustomSeo {
    @{
        /**/
        if (!String.IsNullOrEmpty(Model.MetaDescription))
        {
            <meta name="Description" content="@Model.MetaDescription">
            <meta property="og:description" content="@Model.MetaDescription">
            <meta name="twitter:description" content="@Model.MetaDescription">
        }

        if (!String.IsNullOrEmpty(Model.MetaKeyWords))
        {
            <meta name="Keywords" content="@Model.MetaKeyWords">
        }

        <meta property="og:type" content="website">
        <meta property="og:url" content="@HttpUtility.HtmlEncode(Request.Url)">
        <meta name="twitter:url" content="@HttpUtility.HtmlEncode(Request.Url)">
        <meta property="og:title" content="@Html.Raw(ViewBag.Title)">
        <meta name="twitter:title" content="@Html.Raw(ViewBag.Title)">
        <meta property="og:image" content="@ImageOpenGraph">

        <script type="application/ld+json">
        @{
            if(breadcrumb != null)
            {
                LojaCorp.Models.BreadcrumbListStructureSEO BreadcrumbStructureSEO = new LojaCorp.Models.BreadcrumbListStructureSEO(breadcrumb);
                @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(BreadcrumbStructureSEO))
            }
        }
        </script>
    }
}

@section breadcrumbs {
    <div class="ui two column centered grid stackable middle aligned">
        <div class="container">
            <div class="column">
                <div class="ui breadcrumb margin top medium">
                    <a class="section" href=""></a>

                    @if (breadcrumb != null)
                    {
                        <a class="section" href="/">Home</a>
                        foreach (var item in breadcrumb)
                        {
                            <i class="right angle icon divider"></i>
                            <a class="section" href="@item.Link">@item.CategorieName</a>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="ui divider"></div>
}

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<!-- COMEÇO - Váriaveis Produto Principal-->
<input type="hidden" id="produto-id" name="produto-id" value="@Model.IdProduct" />
<input type="hidden" id="produto-stock" name="produto-stock" value="@Model.Stock" />
<input type="hidden" id="produto-sku" name="produto-sku" value="@SKUPadrao.IdSku" />
<input type="hidden" id="produto-codigo" name="produto-codigo" value="@Model.Code" />
<input type="hidden" id="lista-imagens-slide" name="lista-imagens-slide" value="@ListaImagens" />
<input type="hidden" id="principal-total-variacoes" name="principal-total-variacoes" value="@(Model.AvailableReferences != null ? Model.AvailableReferences.Count() : 0) " />
<input type="hidden" id="principal-lista-sku" name="principal-lista-sku" value="@ListaSKU" />
<input type="hidden" id="principal-referencias-selecionadas" name="principal-referencias-selecionadas" value="@variacaoSelecionada" />
<input type="hidden" id="variacoesSelecionadas" value="" />
<input type="hidden" id="has-open-sku" value="@((hasOpenSku == true) ? "true" : "false")" />
<input type="hidden" id="b2b" value="false" />




<!-- FIM - Váriaveis Produto Principal-->
<!-- COMEÇO - Váriaveis Produto Unitário-->
@if (!Model.HaveSku)
{
    <input type="hidden" value="@Model.Price" id="preco-unidade" name="preco-unidade" />
    <input type="hidden" value="@Model.PricePromotion" id="preco-promocao-unidade" name="preco-promocao-unidade" />
}

@if (Model.InstallmentMax != null)
{
    <input type="hidden" value="@Model.InstallmentMax.Value" id="parcela-maxima-unidade" name="parcela-maxima-unidade" />
    <input type="hidden" value="@Model.InstallmentMax.MaxNumber" id="qtd-parcela-maxima-unidade" name="qtd-parcela-maxima-unidade" />
    <input type="hidden" value="@Model.InstallmentMax.Description" id="pagamento-descricao" name="pagamento-descricao" />
}
<input type="hidden" value="@AvailableReferences" id="principal-produto-referecias" name="principal-produto-referecias" />
<input type="hidden" value="@JsonDetail" id="json-detail" name="json-detail" />
<input type="hidden" value="@Json.Encode(Model.Personalizations)" id="json-personalizations" name="json-personalizations" />
<input type="hidden" value="@ViewBag.DescontoBoleto" id="desconto_boleto" name="desconto_boleto" />
<!-- FIM - Váriaveis Produto Unitário-->
<div class="ui container" itemscope itemtype="http://schema.org/Product">
    <meta itemprop="description" content="">
    <meta itemprop="image" content="@ImagemDefault">
    <link itemprop="url" href="" rel="author" />
    <div class="ui grid stackable produto">
        <div class="row product information one column">

            <!-- COMEÇO MARCA MOBILE-->
            <div class="mobile only column">
                <h1 itemprop="name" class="nomeProduto" id="produto-nome">@Model.Name</h1>
                @if (Model.Brand != null)
                {
                    <h5 itemprop="productBrand" class="marcaProduto">@Model.Brand.Name</h5>
                }
                else
                {
                    <h5 itemprop="productBrand" class="marcaProduto"></h5>
                }
                <!-- FIM MARCA MOBILE-->
                <div class="ui two column grid">
                    <div class="column six wide mobile">
                        <h6 itemprop="productID" class="codProduto">@Model.Code</h6>
                    </div>
                    <div class="column ten wide mobile">
                        <div class="avaliacoes">
                            <div class="ui tiny star rating" data-rating="@Model.Rate.Value.ToString().Replace(",", ".")"></div>
                            @if (Model.ProductRatings != null)
                            {
                                if (Model.ProductRatings.Count() == 1)
                                {
                                    <span>1 avaliação</span>
                                }
                                else
                                {
                                    <span>@Model.ProductRatings.Count() avaliações</span>
                                }
                            }
                            else
                            {
                                <span>0 avaliações</span>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row detalhes produto">
            <!-- FIM IMAGENS DO PRODUTO PRINCIPAL-->
            <div class="sixteen wide mobile @classSkus wide computer column" id="exibePartial">
                @Html.Partial("~/Views/Product/Details/_Slide.cshtml", productImages.ToList())
            </div>
            <!-- COMEÇO IMAGENS DO PRODUTO PRINCIPAL-->
            <div class="ui divider hidden"></div>
            <!-- COMEÇO INFORMAÇÕES DO PRODUTO-->
            <div class="sixteen wide mobile seven wide computer column infoProduto">
                <div class="ui grid">
                    <div class="mobile-hide row product information">
                        <div class="column">
                            <h1 itemprop="name" class="nomeProduto" id="produto-nome">@Model.Name</h1>
                            @if (@Model.Brand != null)
                            {
                                <h5 itemprop="productBrand" class="marcaProduto">@Model.Brand.Name</h5>
                            }
                            else
                            {
                                <h5 itemprop="productBrand" class="marcaProduto"></h5>
                            }
                            <div class="ui two column grid stackable">
                                <div class="column">
                                    <h6 itemprop="productID" class="codProduto">@Model.Code</h6>
                                </div>
                                <div class="column">
                                    <div class="avaliacoes">
                                        <div class="ui tiny star rating" data-rating="@Model.Rate.Value.ToString().Replace(",", ".")"></div>
                                        @if (Model.ProductRatings != null)
                                        {
                                            if (Model.ProductRatings.Count() == 1)
                                            {
                                                <span>1 avaliação</span>
                                            }
                                            else
                                            {
                                                <span>@Model.ProductRatings.Count() avaliações</span>
                                            }
                                        }
                                        else
                                        {
                                            <span>0 avaliações</span>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!--COMEÇO DICA DE COMPRA-->

                    @Html.Action("buyingTips", "product", new { productID = @Model.IdProduct, skuID = SKUPadrao != null ? SKUPadrao.IdSku : 0 })
                    <!--FIM DICA DE COMPRA-->

                    @Html.Partial("~/Views/Product/Details/_FlagDiscount.cshtml", Model)


                    <div class="row product-grid">
                        <div class="column blocoInfo">
                            <div class="ui middle aligned margin bottom medium blocoValores">
                                @if (hasOpenSku && Model.SKUs != null && Session["EventList"] == null)
                                {
                                    //GRADE ABERTA B2C
                                    @Html.Partial("~/Views/Product/Details/_GradeSkuB2B.cshtml", Model, new ViewDataDictionary { { "useOneCLick", useOneClickMaxiPago }, { "isB2B", false }, { "hasOpenSku", hasOpenSku } });
                                }
                                else
                                {

                                    <input type="hidden" id="hdnShowProductOutOfStock" value="@(!LojaCorp.Control.Company._Company.ShowProductOutOfStock ? 0 : 1)" />
                                    if (Model.AvailableReferences != null && !string.IsNullOrEmpty(JsonDetail))
                                    {
                                        <div class="one column ui segment">
                                            <div class="column">
                                                <div id="variations-container" class="grid-variations"></div>
                                            </div>
                                        </div>
                                    }

                                    if (Model.ProductGrouping != null && Model.ProductGrouping.Products != null)
                                    {
                                        <div class="one column ui attached segment">
                                            <div class="column">
                                                @Html.Partial("~/Views/Product/Details/_ProductsGrouping.cshtml", Model.ProductGrouping)
                                            </div>
                                        </div>
                                    }

                                    if (Model.Personalizations != null)
                                    {
                                        @Html.Partial("~/Views/Product/Details/_Personalizations.cshtml", Model.Personalizations)
                                    }

                                    @*@Html.Action("variations", "product", new { reference = @Model.AvailableReferences, skuPadrao = @SKUPadrao, ListaSku = Model.SKUs })*@

                                    <!--FIM VARIAÇÔES-->

                                    if (Model.IsKit)
                                    {
                                        @Html.Partial("~/Views/Product/Details/_ProductsKit.cshtml", Model.KitProducts)
                                    }

                                    <div class="column ui attached segment">

                                        <div class="ui grid">
                                            <div class="row stackable two column">
                                                <div class="column middle aligned padding-top no blocoQtd">
                                                    <div class="ui qtd action mini input">
                                                        <button class="ui icon button qtdminus" id="qtdminus-detalhes">
                                                            <i class="minus icon"></i>
                                                        </button>
                                                        <input type="number" min="1" step="1" size="3" value="1"
                                                               name="quantidade" id="quantidade" class="text center" />
                                                        <button class="ui grey icon button qtdplus" id="qtdplus-detalhes">
                                                            <i class="add icon"></i>
                                                        </button>
                                                    </div>
                                                </div>

                                                <!--COMEÇO GRADE-->
                                                <div class="column padding-bottom no text right blocoPreco" itemprop="offers" id="block-price" itemscope="" itemtype="http://schema.org/Offer">
                                                    <meta itemprop="priceCurrency" content="BRL" />
                                                    <div id="variacao-preco">
                                                        @if (Model.IsKit)
                                                        {
                                                            <div class="infoPrecoKit">
                                                                <span class="display block">Sub-Total: @(string.Format("{0:c}", Model.KitProducts.Sum(m => m.PricePromotion)))</span>
                                                                <span class="display block">Desconto do Kit: @(string.Format("{0:c}", Model.KitProducts.Sum(m => m.Discount)))</span>
                                                            </div>
                                                        }
                                                        @{
                                                            decimal price = Model.Price;
                                                            decimal? pricePromotion = Model.PricePromotion;
                                                            InstallmentMax installmentMax = Model.InstallmentMax;
                                                            
                                                            if (Model.HaveSku)
                                                            {
                                                                price = SKUPadrao.Price;
                                                                pricePromotion = SKUPadrao.PricePromotion;
                                                                installmentMax = SKUPadrao.InstallmentMax;
                                                            }
                                                            
                                                            bool hasPromotion = pricePromotion != null && price > 0;
                                                            decimal? finalPrice = hasPromotion
                                                                ? pricePromotion
                                                                : price;
                                                            
                                                            priceGoogleMerchant = string.Format("{0:0.00}", finalPrice).Replace(",", ".");
                                                            
                                                            var eligibleDiscounts = LojaCorp.Control.Company._Company.DiscountPaymentMethodList
                                                                .Where(p => finalPrice >= p.DiscountMinimumValue);
                                                            
                                                            <div class="baseDiscount">
                                                                @{
                                                                    if (showPriceDiscount && eligibleDiscounts.Any())
                                                                    {
                                                                        var higherDiscount = eligibleDiscounts
                                                                            .Max(p => p.Discount);

                                                                        var higherDisocuntPaymentMethods = eligibleDiscounts
                                                                            .Where(p => p.Discount == higherDiscount)
                                                                            .OrderByDescending(p => p.Name)
                                                                            .Take(2)
                                                                            .ToList();
                                                                        
                                                                        if (higherDisocuntPaymentMethods.Any())
                                                                        {
                                                                            var descriptionHigherDiscount = higherDisocuntPaymentMethods.Count() == 2
                                                                                ? $"{higherDisocuntPaymentMethods[0].Name} ou {higherDisocuntPaymentMethods[1].Name}"
                                                                                : higherDisocuntPaymentMethods.First().Name;
                                                                            
                                                                            var discountCalc = finalPrice - finalPrice / 100 * higherDiscount;
                                                                            priceGoogleMerchant = string.Format("{0:0.00}", discountCalc).Replace(",", ".");
                                                                            
                                                                            <div class="priceDiscount">
                                                                                R$ @string.Format("{0:n2}", discountCalc)<span class="textDiscount">no @descriptionHigherDiscount</span>
                                                                            </div>
                                                                            <span class="descriptionDiscount">com @(higherDiscount)% de desconto</span>
                                                                        }
                                                                    }
                                                                }
                                                            </div>

                                                            if (hasPromotion)
                                                            {
                                                                <span class="precoAntigo" id="preco-antigo">@price.ToString("C")</span>
                                                            }
                                                            <span itemprop="price" content="@priceGoogleMerchant" class="preco" id="preco" data-preco-inicial="@finalPrice">@finalPrice.Value.ToString("C")</span>
                                                            if (installmentMax != null && installmentMax.MaxNumber > 1)
                                                            {
                                                                <div class="infoPreco">
                                                                    <span id="max-p">@installmentMax.MaxNumber<span>X de</span></span>
                                                                    <span id="max-value">@installmentMax.Value.ToString("C")</span>
                                                                    <span id="description">@installmentMax.Description</span>
                                                                </div>

                                                            }
                                                        }
                                                    </div>

                                                    @if (!string.IsNullOrEmpty(@Model.DescriptionAvailabilityStatus))
                                                    {
                                                        <p class="text color grey regular parcelamento small">@Model.DescriptionAvailabilityStatus</p>
                                                    }
                                                </div>
                                                <!--FIM GRADE-->

                                                @if (Model.PurchaseRecurring)
                                                {
                                                    <div class="sixteen wide column text right signature-line">
                                                        @{
                                                            priceGoogleMerchant = string.Format("{0:0.00}", Model.PricepromotionCA).Replace(",", ".");
                                                        }
                                                        <span itemprop="price" content="@priceGoogleMerchant" class="signature-value" data-preco-inicial="@Model.PricepromotionCA">@string.Format("R${0:0.00}", Model.PricepromotionCA)</span>
                                                        <span class="recurrentperiods" data-html="Périodos de Assinatura Disponível:<br/>
                                                    @foreach (var item in Model.ProductRecurrentPeriod)
                                                    {
                                                        @Html.Raw(" - " + item.TipoEntrega + "<br/>")
                                                    }
                                                    ">&nbsp;na assinatura&nbsp;<i class="info circle icon"></i></span>
                                                    </div>
                                                }
                                                <div class="sixteen wide computer sixteen wide tablet sixteen wide mobile column btnComprar">
                                                    @if (!Model.ProductSignature)
                                                    {
                                                        <a class="@(Model.Stock == 0 || Model.FlagExhausted || Model.ProductSignature ? " disabled " : " ") ui animated button detalhes @(Session["EventList"] != null ? "btn-add-event-list" : "btn-comprar") @(Model.FlagExhausted || Model.ProductSignature || (Model.HaveSku && SKUPadrao.Stock == 0) || (Model.Stock == 0) ? "disabled action" : "action" )">
                                                            @if (Model.FlagExhausted || (Model.HaveSku && SKUPadrao.Stock == 0) || (Model.Stock == 0))
                                                            {
                                                                <div class="visible content">PRODUTO ESGOTADO</div>
                                                            }
                                                            else
                                                            {
                                                                <div class="visible content">
                                                                    @(Session["EventList"] != null ? "ADICIONAR À LISTA" : "ADICIONAR AO CARRINHO")
                                                                </div>
                                                            }
                                                            <div class="hidden content">
                                                                <i class="add to cart icon"></i>
                                                            </div>
                                                        </a>
                                                    }
                                                    @if (Model.PurchaseRecurring && Model.Stock > 0 && !Model.FlagExhausted)
                                                    {
                                                        ViewBag.PurchaseRecurring = "true";
                                                        <a class="ui animated button recurring btn-comprar-assinar detalhes">
                                                            <div class="visible content">ASSINAR PRODUTO</div>
                                                            <div class="hidden content">
                                                                <i class="add to cart icon"></i>
                                                            </div>
                                                        </a>
                                                    }
                                                    <br />
                                                    @if (!Model.ProductSignature)
                                                    {
                                                        if (useOneClickMaxiPago)
                                                        {
                                                            <a class="@(Model.Stock == 0 || Model.FlagExhausted ? " disabled " : " ") ui button small animated basic detalhes btn-comprar-oneclick  @(Model.FlagExhausted || (Model.HaveSku && SKUPadrao.Stock == 0) || (Model.Stock == 0) ? " disabled" : "" )">
                                                                <div class="visible content">Comprar com 1-Click</div>
                                                                <div class="hidden content">
                                                                    <i class="add to cart icon"></i>
                                                                </div>
                                                            </a>
                                                        }

                                                        bool inlist = ViewBag.InWishList ? true : false;
                                                        string color = ViewBag.InWishList ? "red" : "grey";
                                                        bool isb2b = Session["segment"] != null && Session["segment"].ToString() == "b2b" ? true : false;
                                                        if (!isb2b)
                                                        {
                                                            <div class="one column wishlistDetails">
                                                                <div class="column">
                                                                    <a href="#" class="wishlist-btn" data-wishlist-local="detail">
                                                                        <i class="icon heart @color wishlist-item" data-in-list="@inlist" data-have-sku="@(Model.AvailableReferences != null && Model.AvailableReferences.Count() > 0 ? "true" : "false")" data-product-id="@Model.IdProduct"></i>
                                                                        <span>Adicionar a Lista de Desejo</span>
                                                                    </a>
                                                                </div>
                                                            </div>
                                                        }
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>

                            @if (!Model.FlagExhausted)
                            {
                                <div id="pagamento-calculado">
                                    @if (@Model.PricePromotion != null && @Model.PricePromotion > 0)
                                    {
                                        @Html.Action("payment", "product", new { valor = @Model.PricePromotion, flagExibir = Model.FlagExhausted == true || Model.Stock <= 0 ? false : true })
                                    }
                                    else
                                    {
                                        @Html.Action("payment", "product", new { valor = @Model.Price, flagExibir = Model.FlagExhausted == true || Model.Stock <= 0 ? false : true })
                                    }
                                </div>
                            }

                            @if (Model.HaveSku)
                            {
                                if (!hasOpenSku)
                                {
                                    if (Model.FlagExhausted || SKUPadrao.Stock == 0)
                                    {
                                        @Html.Partial("~/Views/Product/Details/_AlertMe.cshtml", true)
                                    }
                                    else
                                    {
                                        @Html.Partial("~/Views/Product/Details/_AlertMe.cshtml", false)
                                    }
                                }
                            }
                            else
                            {
                                if (Model.FlagExhausted || Model.Stock == 0)
                                {
                                    @Html.Partial("~/Views/Product/Details/_AlertMe.cshtml", true)
                                }
                                else
                                {
                                    @Html.Partial("~/Views/Product/Details/_AlertMe.cshtml", false)
                                }
                            }

                            <!-- COMEÇO SIMULADOR FRETE-->
                            <div class="ui divider hidden"></div>
                            <div class="column ui attached segment simulador-frete">
                                <div class="ui grid">
                                    <div class="row stackable three column">
                                        <div class="column middle aligned">
                                            <span>Calcular frete e prazo</span>
                                        </div>
                                        <div class="column">
                                            <div class="ui input">
                                                <input type="text" name="simular-frete-cep" id="simular-frete-cep" placeholder="00000-000">
                                            </div>
                                        </div>
                                        <div class="column">
                                            <button name="simular-frete-submit" id="simular-frete-submit" data-purchaserecurring="@ViewBag.PurchaseRecurring" class="ui button primary">OK</button>
                                        </div>
                                    </div>
                                    <div class="row stackable two column div-frete-retira-detalhes" style="display: none">
                                        <div class="column">
                                            <button name="frete-receber-detalhes" id="frete-receber-detalhes" class="ui button fs basic">Receber</button>
                                            <button name="frete-retirar-detalhes" id="frete-retirar-detalhes" class="ui button sc basic">Retirar</button>
                                        </div>
                                        <input type="hidden" id="hdnRetirarDetalhes" value="false" />
                                    </div>
                                </div>
                                <div class="ui divider"></div>
                                <table class="ui very basic table">
                                    <thead id="listHeadSimulateFreight"></thead>
                                    <tbody id="listSimulateFreight">
                                        <tr><td colspan="3" class="center aligned">Digite um CEP e clique no botão OK.</td></tr>
                                    </tbody>
                                </table>
                            </div>
                            <!-- FIM SIMULADOR FRETE-->
                        </div>
                    </div>
                </div>
            </div>
            <!-- FIM INFORMAÇÕES DO PRODUTO-->
        </div>

        <div class="ui divider hidden"></div>
        <!--COMEÇO DESCRIÇÃO-->
        <div class="row">
            <div id="scroll" class="ui top attached secondary pointing stackable menu tabular">
                <a class="item active" data-tab="informacoes">Informações Básicas</a>
                <a class="item" data-tab="detalhes">Características do Produto </a>
                <a class="item" data-tab="avaliacoes">Avaliações</a>
            </div>
            <div class="ui bottom attached tab segment basic active " data-tab="informacoes">
                @Html.Raw(Model.DescriptionDetailSummary)
            </div>

            <!--COMEÇO DETALHES PRODUTO-->
            <div class="ui bottom attached tab segment basic" data-tab="detalhes" id="detalhes">
                <div class="ui grid one column">
                    <div class="column">
                        @Html.Raw(@Model.DescriptionDetail)
                        @Html.Raw(@Model.DescriptionDetailAdditionalTwo)
                        @Html.Raw(@Model.DescriptionDetailAdditionalThree)
                        @Html.Raw(@Model.DescriptionDetailAdditionalFour)
                    </div>
                    @if (Model.Attributes != null && Model.Attributes.Count() > 0)
                    {
                        var useFilter = Model.Attributes.Where(attr => attr.useFilter).ToList();
                        if (useFilter.Count > 0)
                        {
                            <div class="column">
                                <h4>Informações Adicionais do Produto</h4>
                                @foreach (var atribute in Model.Attributes)
                                {
                                    if (atribute.useFilter)
                                    {
                                        var attrValues = "";
                                        <p>
                                            <strong>@atribute.name: </strong>
                                            @foreach (var valor in atribute.attributeValues)
                                            {
                                                if (valor.active)
                                                {
                                                    attrValues = attrValues != "" ? attrValues + "," + @valor.Value : @valor.Value;
                                                }
                                            }
                                            @attrValues
                                        </p>
                                    }
                                }
                            </div>
                        }
                    }
                </div>
            </div>
            <!--FIM DETALHES PRODUTO-->
            <div class="ui bottom attached tab segment basic" data-tab="avaliacoes" id="avaliacoes">
                <div class="ui grid">
                    <div class="row two column horizontal divided stackable">
                        <!-- COMEÇO AVALIAÇÂO-->
                        <div class="column">
                            <div class="ui comments fluid" id="lista_avaliacoes">
                                @{ int total = Model.ProductRatings.Count > 5 ? 5 : Model.ProductRatings.Count; }
                                @if (Model.ProductRatings != null && total > 0)
                                {
                                    for (int i = 0; i < total; i++)
                                    {
                                        <div class="comment">
                                            <div class="content">
                                                <a class="author">@Model.ProductRatings[i].Name</a>
                                                <div class="metadata">
                                                    <div class="rating">
                                                        <div class="ui mini star rating" data-rating="@Model.ProductRatings[i].Rate"></div>
                                                    </div>
                                                    <div class="date"></div>
                                                    @if (Model.ProductRatings[i].LeavePublicEmail == true)
                                                    {
                                                        <div class="email">@Model.ProductRatings[i].Email</div>
                                                    }
                                                    else
                                                    {
                                                        <div class="email"></div>
                                                    }
                                                    <div class="date">@Model.ProductRatings[i].DateRegister</div>
                                                    <div class="address">@Model.ProductRatings[i].AddressCity</div>
                                                </div>
                                                <div class="text">
                                                    <h5>@Model.ProductRatings[i].Title</h5>
                                                    <p>@Model.ProductRatings[i].Comment</p>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="ui divider"></div>
                                    }
                                }
                                else
                                {
                                    <div class="no-results">Até o momento não há avaliações para esse produto.</div>
                                }
                            </div>
                            @if (Model.ProductRatings != null && Model.ProductRatings.Count > 5)
                            {
                                <div class="ui button teal tiny right icon" id="btn_carregar_avaliacoes">
                                    <i class="icon refresh"></i>
                                    Carregar mais avaliações
                                </div>
                            }
                        </div>
                        <!-- FIM AVALIAÇÂO-->
                        <!-- COMEÇO FOMULÁRIO DE AVALIAÇÂO-->
                        <div class="column">
                            <form class="ui form" id="avaliar">
                                <div class="field required">
                                    <label>Nome</label>
                                    <input type="text" name="Name" maxlength="100" placeholder="Nome" id="Name" required>
                                </div>
                                <div class="field required">
                                    <label>E-mail</label>
                                    <input type="text" name="email" maxlength="100" placeholder="Email" id="Email" required>
                                </div>
                                <div class="two fields">
                                    <div class="field required" data-jet-revel="true">
                                        <label>Cidade</label>
                                        <div class="ui input">
                                            <input type="text" maxlength="100" name="AddressCity" placeholder="Cidade" id="cidade" required>
                                        </div>
                                    </div>
                                    <div class="field required">
                                        <label>Estado</label>
                                        <select class="ui dropdown search" id="estado_0" name="AddressState">
                                            <option value="">Selecione</option>
                                            <option value="AC">Acre</option>
                                            <option value="AL">Alagoas</option>
                                            <option value="AP">Amapá</option>
                                            <option value="AM">Amazonas</option>
                                            <option value="BA">Bahia</option>
                                            <option value="CE">Ceará</option>
                                            <option value="DF">Distrito Federal</option>
                                            <option value="ES">Espírito Santo</option>
                                            <option value="GO">Goiás</option>
                                            <option value="MA">Maranhão</option>
                                            <option value="MT">Mato Grosso</option>
                                            <option value="MS">Mato Grosso do Sul</option>
                                            <option value="MG">Minas Gerais</option>
                                            <option value="PA">Pará</option>
                                            <option value="PB">Paraíba</option>
                                            <option value="PR">Paraná</option>
                                            <option value="PE">Pernambuco</option>
                                            <option value="PI">Piauí</option>
                                            <option value="RJ">Rio de Janeiro</option>
                                            <option value="RN">Rio Grande do Norte</option>
                                            <option value="RS">Rio Grande do Sul</option>
                                            <option value="RO">Rondônia</option>
                                            <option value="RR">Roraima</option>
                                            <option value="SC">Santa Catarina</option>
                                            <option value="SP">São Paulo</option>
                                            <option value="SE">Sergipe</option>
                                            <option value="TO">Tocantins</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="field required" id="rating_st">
                                    <label>Nota</label>
                                    <div class="ui huge star rating" data-value="5" data-rating="5" data-max-rating="5"></div>
                                </div>
                                <div class="field required">
                                    <label>Título</label>
                                    <input type="text" name="Title" maxlength="200" placeholder="Titulo" id="Title">
                                </div>
                                <div class="field required">
                                    <label>Opinião</label>
                                    <textarea id="Comment" maxlength="1000" name="Comment"></textarea>
                                </div>
                                <div class="field">
                                    <div class="ui checkbox" id="ViewEmailCheck">
                                        <input type="checkbox" tabindex="0" class="hidden" name="ViewEmail" id="ViewEmail">
                                        <label>Mostrar Email?</label>
                                    </div>
                                </div>
                                <input type="hidden" name="Rate" id="Rate" value="5" />
                                @Html.Action("getRecaptchaV3", "company", new { Module = "Evaluation" })
                                <br />
                                <button class="ui button btn-avaliar" type="button" id="submitAval">Enviar</button>
                            </form>
                        </div>
                        <!-- FIM FOMULÁRIO DE AVALIAÇÂO-->
                    </div>
                </div>
            </div>
        </div>
        <!--FIM DESCRIÇÃO-->
        @if (!Model.FlagExhausted && !hasOpenSku && Model.Personalizations == null)
        {
            <div class="row" id="buy-together">
                @if (Model.BuyTogether != null && Model.BuyTogether.Count > 0 && Session["EventList"] == null)
                {
                    @Html.Partial("~/Views/Product/Details/_BuyTogether.cshtml", Model)
                }
            </div>
        }

        @if (Model.AlsoProductsPurchased != null && Model.AlsoProductsPurchased.Count > 0)
        {
            <div class="row" id="AlsoProducts">
                @Html.Partial("~/Views/Product/Details/_AlsoPurchased.cshtml", Model.AlsoProductsPurchased)
            </div>
        }


        @if (Model.RelatedProducts != null && Model.RelatedProducts.Count > 0)
        {
            <div class="row" id="RelatedProducts">
                @Html.Partial("~/Views/Product/Details/_RelatedProducts.cshtml", Model.RelatedProducts)
            </div>
        }</div>
</div>

<div class="ui modal login">
    <i class="close icon"></i>
    <div class="header ui center aligned segment">Faça login ou cadastre-se para continuar</div>
    <div class="description">
        @Html.Action("loginPartial", "customer", new { _class = "modal-login", returnURL = Model.UrlFriendlyCustom != null ? $"/customer/autoAddProductInWishListBeforeLogin?redirectToPage={Model.UrlFriendlyCustom}" : $"/customer/autoAddProductInWishListBeforeLogin?redirectToPage={Model.UrlFriendly}" })
    </div>
</div>